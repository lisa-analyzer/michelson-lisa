{ parameter
    (or (or (unit %setLocked) (pair %getSource unit (contract (address :source))))
        (or (list %appendReceivers (pair (address :to) (nat :value)))
            (pair %getReceiversBatch nat (contract (list (pair (address :to) (nat :value))))))) ;
  storage
    (pair (pair address (pair bool address))
          (pair (big_map nat (pair address nat)) (pair nat nat))) ;
  code { CAST (pair (or (or unit (pair unit (contract address)))
                        (or (list (pair address nat)) (pair nat (contract (list (pair address nat))))))
                    (pair (pair address (pair bool address))
                          (pair (big_map nat (pair address nat)) (pair nat nat)))) ;
         NIL operation ;
         SWAP ;
         DUP ;
         CAR ;
         DIP { CDR } ;
         DUP ;
         IF_LEFT
           { IF_LEFT
               { SENDER ;
                 DIP 3 { DUP } ;
                 DIG 3 ;
                 CAR ;
                 CAR ;
                 COMPARE ;
                 EQ ;
                 IF {} { UNIT ; PUSH string "SenderIsNotOriginator" ; PAIR ; FAILWITH } ;
                 DIP 2 { DUP } ;
                 DIG 2 ;
                 CAR ;
                 CDR ;
                 CAR ;
                 IF { UNIT ; PUSH string "DlLocked" ; PAIR ; FAILWITH }
                    { DIP 2 { DUP } ;
                      DIG 2 ;
                      DUP ;
                      DIP { CDR } ;
                      CAR ;
                      DUP ;
                      DIP { CAR } ;
                      CDR ;
                      DUP ;
                      DIP { CDR } ;
                      CAR ;
                      PUSH bool True ;
                      SWAP ;
                      DROP ;
                      PAIR ;
                      SWAP ;
                      PAIR ;
                      PAIR ;
                      DIP 3 { DROP } ;
                      DUG 2 } ;
                 DROP }
               { DIP 2 { DUP } ;
                 DIG 2 ;
                 CAR ;
                 CDR ;
                 CAR ;
                 IF {} { UNIT ; PUSH string "DlNotLocked" ; PAIR ; FAILWITH } ;
                 DUP ;
                 CDR ;
                 AMOUNT ;
                 DIP 4 { DUP } ;
                 DIG 4 ;
                 CAR ;
                 CDR ;
                 CDR ;
                 TRANSFER_TOKENS ;
                 DUG 3 ;
                 DIP 3 { CONS } ;
                 DROP } }
           { IF_LEFT
               { DIP 2 { DUP } ;
                 DIG 2 ;
                 CAR ;
                 CDR ;
                 CAR ;
                 IF { UNIT ; PUSH string "DlLocked" ; PAIR ; FAILWITH } {} ;
                 SENDER ;
                 DIP 3 { DUP } ;
                 DIG 3 ;
                 CAR ;
                 CAR ;
                 COMPARE ;
                 EQ ;
                 IF {} { UNIT ; PUSH string "SenderIsNotOriginator" ; PAIR ; FAILWITH } ;
                 DIP 2 { DUP } ;
                 DIG 2 ;
                 CDR ;
                 CDR ;
                 CAR ;
                 DIP 3 { DUP } ;
                 DIG 3 ;
                 CDR ;
                 CAR ;
                 DIP 2 { DUP } ;
                 DIG 2 ;
                 ITER { DIP { DUP } ;
                        SWAP ;
                        DIP { DUP } ;
                        SWAP ;
                        SOME ;
                        DIP 4 { DUP } ;
                        DIG 4 ;
                        UPDATE ;
                        DIP 2 { DROP } ;
                        DUG 1 ;
                        PUSH nat 1 ;
                        DUG 2 ;
                        DIP 2 { ADD } ;
                        DROP } ;
                 DUP ;
                 DUG 4 ;
                 DIP 4
                     { DIP { DUP ; DIP { CAR } ; CDR } ;
                       DIP { DUP ; DIP { CDR } ; CAR } ;
                       SWAP ;
                       DROP ;
                       PAIR ;
                       SWAP ;
                       PAIR } ;
                 DIP { DUP } ;
                 SWAP ;
                 DUG 4 ;
                 DIP 4
                     { DIP { DUP ; DIP { CAR } ; CDR } ;
                       DIP { DUP ; DIP { CAR } ; CDR } ;
                       DIP { DUP ; DIP { CDR } ; CAR } ;
                       SWAP ;
                       DROP ;
                       PAIR ;
                       SWAP ;
                       PAIR ;
                       SWAP ;
                       PAIR } ;
                 DROP 3 }
               { DIP 2 { DUP } ;
                 DIG 2 ;
                 CAR ;
                 CDR ;
                 CAR ;
                 IF {} { UNIT ; PUSH string "DlNotLocked" ; PAIR ; FAILWITH } ;
                 DIP 2 { DUP } ;
                 DIG 2 ;
                 CDR ;
                 CAR ;
                 NIL (pair address nat) ;
                 DIP 2 { DUP } ;
                 DIG 2 ;
                 CAR ;
                 DIP 5 { DUP } ;
                 DIG 5 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 DUP ;
                 DIP 2 { DUP } ;
                 DIG 2 ;
                 COMPARE ;
                 LT ;
                 LOOP { DIP 3 { DUP } ;
                        DIG 3 ;
                        DIP 2 { DUP } ;
                        DIG 2 ;
                        GET ;
                        IF_NONE
                          { DUP ; DIP 2 { DROP } ; DUG 1 }
                          { DIP 3 { DUP } ;
                            DIG 3 ;
                            DIP { DUP } ;
                            SWAP ;
                            CONS ;
                            DIP 4 { DROP } ;
                            DUG 3 ;
                            PUSH nat 1 ;
                            DUG 2 ;
                            DIP 2 { ADD } ;
                            DROP } ;
                        DUP ;
                        DIP 2 { DUP } ;
                        DIG 2 ;
                        COMPARE ;
                        LT } ;
                 DIP 4 { DUP } ;
                 DIG 4 ;
                 CDR ;
                 AMOUNT ;
                 DIP 4 { DUP } ;
                 DIG 4 ;
                 TRANSFER_TOKENS ;
                 DUG 7 ;
                 DIP 7 { CONS } ;
                 DROP 5 } } ;
         DROP ;
         SWAP ;
         PAIR } }
