{ parameter
    (pair :param
       (nat %pctr)
       (or :action %action
          (int %Deposit)
          (pair :action.Withdraw (mutez %amount) (signature %sg)))) ;
  storage (pair :store (pair (nat %ctr) (mutez %bal)) (pair (key %manager) (nat %rnonce))) ;
  code { {} ;
         { DUP ; CDR ; DIP { CAR } } ;
         { { { DIG 1 ; DUP ; DUG 2 } ; CAR } ;
           { { DIG 2 ; DUP ; DUG 3 } ; CDR } ;
           { { DIG 2 ; DUP ; DUG 3 } ; CAR } ;
           { { DIG 3 ; DUP ; DUG 4 } ; CDR } ;
           { { DIG 1 ; DUP ; DUG 2 } ; CAR } ;
           { { DIG 2 ; DUP ; DUG 3 } ; CDR } ;
           { { DIG 2 ; DUP ; DUG 3 } ; CAR } ;
           { { DIG 3 ; DUP ; DUG 4 } ; CDR } ;
           { DIG 3 ; DUP ; DUG 4 } ;
           { DIG 8 ; DUP ; DUG 9 } ;
           COMPARE ;
           NEQ ;
           IF { { DIG 7 ; DUP ; DUG 8 } ;
                { DIG 4 ; DUP ; DUG 5 } ;
                PAIR ;
                PUSH string "counter inconsistency" ;
                PAIR ;
                FAILWITH }
              { { DIG 6 ; DUP ; DUG 7 } ;
                IF_LEFT
                  { PUSH int 0 ;
                    { DIG 1 ; DUP ; DUG 2 } ;
                    COMPARE ;
                    EQ ;
                    IF { { { DIG 9 ; DUP ; DUG 10 } ; CAR } ;
                         { DUP ; CAR } ;
                         { DIG 11 ; DUP ; DUG 12 } ;
                         CDR ;
                         { DIG 12 ; DUP ; DUG 13 } ;
                         CAR ;
                         CDR ;
                         PUSH nat 1 ;
                         { DIG 3 ; DUP ; DUG 4 } ;
                         ADD ;
                         PAIR ;
                         PAIR ;
                         DIP { DROP 2 } ;
                         CDR ;
                         PUSH unit Unit ;
                         DROP ;
                         AMOUNT ;
                         { DIG 5 ; DUP ; DUG 6 } ;
                         ADD ;
                         { { DIG 11 ; DUP ; DUG 12 } ; CAR } ;
                         { DUP ; CAR } ;
                         { DIG 13 ; DUP ; DUG 14 } ;
                         CDR ;
                         { DIG 14 ; DUP ; DUG 15 } ;
                         CAR ;
                         CDR ;
                         PUSH nat 1 ;
                         { DIG 3 ; DUP ; DUG 4 } ;
                         ADD ;
                         PAIR ;
                         PAIR ;
                         DIP { DROP 2 } ;
                         CAR ;
                         CAR ;
                         PAIR ;
                         PAIR ;
                         NIL operation ;
                         PAIR }
                       { UNIT ; FAILWITH } ;
                    DIP { DROP } }
                  { { DUP ; CAR } ;
                    { { DIG 1 ; DUP ; DUG 2 } ; CDR } ;
                    { { { DIG 1 ; DUP ; DUG 2 } ;
                        { DIG 11 ; DUP ; DUG 12 } ;
                        PAIR ;
                        { DIG 4 ; DUP ; DUG 5 } ;
                        PAIR } ;
                      { DUP ; PACK } ;
                      DUP ;
                      { DIG 3 ; DUP ; DUG 4 } ;
                      { DIG 8 ; DUP ; DUG 9 } ;
                      CHECK_SIGNATURE ;
                      IF { PUSH (int :checksig_result) 0 } { PUSH (int :checksig_result) 1 } ;
                      DIP { DROP 2 } } ;
                    PUSH (int :checksig_result) 0 ;
                    { DIG 1 ; DUP ; DUG 2 } ;
                    COMPARE ;
                    EQ ;
                    IF { { { DIG 12 ; DUP ; DUG 13 } ; CAR } ;
                         { DUP ; CAR } ;
                         { DIG 14 ; DUP ; DUG 15 } ;
                         CDR ;
                         { DIG 15 ; DUP ; DUG 16 } ;
                         CAR ;
                         CDR ;
                         PUSH nat 1 ;
                         { DIG 3 ; DUP ; DUG 4 } ;
                         ADD ;
                         PAIR ;
                         PAIR ;
                         DIP { DROP 2 } ;
                         CDR ;
                         { DIG 3 ; DUP ; DUG 4 } ;
                         { DIG 8 ; DUP ; DUG 9 } ;
                         SUB ;
                         { { DIG 14 ; DUP ; DUG 15 } ; CAR } ;
                         { DUP ; CAR } ;
                         { DIG 16 ; DUP ; DUG 17 } ;
                         CDR ;
                         { DIG 17 ; DUP ; DUG 18 } ;
                         CAR ;
                         CDR ;
                         PUSH nat 1 ;
                         { DIG 3 ; DUP ; DUG 4 } ;
                         ADD ;
                         PAIR ;
                         PAIR ;
                         DIP { DROP 2 } ;
                         CAR ;
                         CAR ;
                         PAIR ;
                         PAIR ;
                         NIL operation ;
                         { PUSH unit Unit ; DROP ; SOURCE } ;
                         { { DUP ; CONTRACT unit } ;
                           DUP ;
                           IF_NONE { PUSH string "panic" ; FAILWITH } { DUP ; DIP { DROP } } ;
                           DIP { DROP } } ;
                         DUP ;
                         { DIG 7 ; DUP ; DUG 8 } ;
                         PUSH unit Unit ;
                         TRANSFER_TOKENS ;
                         DIP { DROP 2 } ;
                         CONS ;
                         PAIR }
                       { PUSH (int :checksig_result) 1 ;
                         { DIG 1 ; DUP ; DUG 2 } ;
                         COMPARE ;
                         EQ ;
                         IF { PUSH string "bad signature" ; FAILWITH } { UNIT ; FAILWITH } } ;
                    DIP { DROP 4 } } } ;
           DIP { DROP 8 } } ;
         DIP { DROP 2 } } }
