{ parameter
    (or (pair %check_address (bytes %name) (address %address))
        (lambda %proxy_admin_update
           (pair (address %contract) (address %owner))
           (pair (list operation) (pair (address %contract) (address %owner))))) ;
  storage (pair (address %contract) (address %owner)) ;
  code { DUP ;
         CDR ;
         SWAP ;
         CAR ;
         IF_LEFT
           { SWAP ;
             DUP ;
             CAR ;
             DIG 2 ;
             PACK ;
             PUSH string "CheckAddress" ;
             PAIR ;
             PAIR ;
             DUP ;
             CDR ;
             CONTRACT %execute
               (pair (pair (string %action_name) (address %original_sender)) (bytes %payload)) ;
             IF_NONE
               { DROP ; PUSH string "INVALID_CONTRACT" ; FAILWITH }
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CDR ;
                 SENDER ;
                 DIG 3 ;
                 CAR ;
                 CAR ;
                 PAIR ;
                 PAIR ;
                 NIL operation ;
                 DIG 2 ;
                 AMOUNT ;
                 DIG 3 ;
                 TRANSFER_TOKENS ;
                 CONS } ;
             PAIR }
           { PAIR ;
             DUP ;
             CDR ;
             DUP ;
             CDR ;
             SENDER ;
             COMPARE ;
             EQ ;
             IF { SWAP ; CAR ; SWAP ; EXEC }
                { DROP 2 ; PUSH string "NOT_AUTHORIZED" ; FAILWITH } } } }
