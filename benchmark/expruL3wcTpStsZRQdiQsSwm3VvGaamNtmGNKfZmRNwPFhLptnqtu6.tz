{ parameter
    (or (or (nat %check) (nat %mark_done))
        (or (pair %start_habit
               (pair (address %checker) (pair (bytes %goal) (nat %goalAmount)))
               (pair (pair (nat %key) (int %lengthOfTime)) (pair (mutez %penalty) (address %retour))))
            (unit %withdraw))) ;
  storage
    (pair (mutez %burned)
          (big_map %mapping
             nat
             (pair (pair (pair (address %checker) (timestamp %deadLine))
                         (pair (bytes %goal) (nat %goalAmount)))
                   (pair (pair (int %lengthOfTime) (mutez %penalty))
                         (pair (address %retour) (pair (mutez %stake) (timestamp %startTime))))))) ;
  code { LAMBDA
           (pair (pair %in_param
                    (pair %habit
                       (pair (pair (address %checker) (timestamp %deadLine))
                             (pair (bytes %goal) (nat %goalAmount)))
                       (pair (pair (int %lengthOfTime) (mutez %penalty))
                             (pair (address %retour) (pair (mutez %stake) (timestamp %startTime)))))
                    (nat %key))
                 (pair %in_storage
                    (mutez %burned)
                    (big_map %mapping
                       nat
                       (pair (pair (pair (address %checker) (timestamp %deadLine))
                                   (pair (bytes %goal) (nat %goalAmount)))
                             (pair (pair (int %lengthOfTime) (mutez %penalty))
                                   (pair (address %retour) (pair (mutez %stake) (timestamp %startTime))))))))
           (pair (list %operations operation)
                 (pair (unit %result)
                       (pair %storage
                          (mutez %burned)
                          (big_map %mapping
                             nat
                             (pair (pair (pair (address %checker) (timestamp %deadLine))
                                         (pair (bytes %goal) (nat %goalAmount)))
                                   (pair (pair (int %lengthOfTime) (mutez %penalty))
                                         (pair (address %retour) (pair (mutez %stake) (timestamp %startTime)))))))))
           { NIL operation ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CDR ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             { CAR ; CDR } ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             { CAR ; CAR } ;
             DUP ;
             { CDR ; CAR ; CDR } ;
             SWAP ;
             DUP ;
             DUG 2 ;
             { CDR ; CDR ; CDR ; CAR } ;
             COMPARE ;
             GE ;
             IF { DUP ; { CAR ; CDR ; CDR } ; PUSH nat 0 ; COMPARE ; LT }
                { PUSH bool False } ;
             IF { DIG 4 ;
                  DROP ;
                  DUP ;
                  DUP ;
                  CAR ;
                  SWAP ;
                  CDR ;
                  DUP ;
                  CAR ;
                  SWAP ;
                  CDR ;
                  DUP ;
                  CAR ;
                  SWAP ;
                  CDR ;
                  DUP ;
                  CDR ;
                  SWAP ;
                  CAR ;
                  DIG 5 ;
                  { CDR ; CAR ; CDR } ;
                  SWAP ;
                  SUB ;
                  PAIR ;
                  SWAP ;
                  PAIR ;
                  SWAP ;
                  PAIR ;
                  SWAP ;
                  PAIR ;
                  DIG 2 ;
                  DUP ;
                  CDR ;
                  SWAP ;
                  CAR ;
                  DIG 2 ;
                  DUP ;
                  DUG 3 ;
                  { CDR ; CAR ; CDR } ;
                  ADD ;
                  PAIR ;
                  DUG 2 }
                { DUP ;
                  { CDR ; CAR ; CDR } ;
                  SWAP ;
                  DUP ;
                  DUG 2 ;
                  { CDR ; CDR ; CDR ; CAR } ;
                  COMPARE ;
                  GE ;
                  IF { DUP ; { CAR ; CDR ; CDR } ; PUSH nat 0 ; COMPARE ; EQ }
                     { PUSH bool False } ;
                  IF { DIG 4 ;
                       DROP ;
                       DIG 2 ;
                       DUP ;
                       CDR ;
                       SWAP ;
                       CAR ;
                       DIG 2 ;
                       DUP ;
                       DUG 3 ;
                       { CDR ; CAR ; CDR } ;
                       ADD ;
                       PAIR ;
                       DUG 2 ;
                       DUP ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       DUP ;
                       CDR ;
                       SWAP ;
                       CAR ;
                       DIG 5 ;
                       { CDR ; CAR ; CDR } ;
                       SWAP ;
                       SUB ;
                       PAIR ;
                       SWAP ;
                       PAIR ;
                       SWAP ;
                       PAIR ;
                       SWAP ;
                       PAIR ;
                       DIG 3 ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       { CDR ; CDR ; CAR } ;
                       CONTRACT unit ;
                       { IF_NONE { PUSH int 111 ; FAILWITH } {} } ;
                       DIG 2 ;
                       DUP ;
                       DUG 3 ;
                       { CDR ; CDR ; CDR ; CAR } ;
                       UNIT ;
                       TRANSFER_TOKENS ;
                       CONS ;
                       DUG 3 ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       { CDR ; CDR } ;
                       PUSH mutez 0 ;
                       PAIR ;
                       SWAP ;
                       PAIR ;
                       SWAP ;
                       PAIR ;
                       SWAP ;
                       PAIR }
                     { DIG 4 ;
                       DROP ;
                       DIG 2 ;
                       DUP ;
                       CDR ;
                       SWAP ;
                       CAR ;
                       DIG 2 ;
                       DUP ;
                       DUG 3 ;
                       { CDR ; CDR ; CDR ; CAR } ;
                       ADD ;
                       PAIR ;
                       DUG 2 ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       { CDR ; CDR } ;
                       PUSH mutez 0 ;
                       PAIR ;
                       SWAP ;
                       PAIR ;
                       SWAP ;
                       PAIR ;
                       SWAP ;
                       PAIR } } ;
             DIG 2 ;
             DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DIG 3 ;
             DIG 3 ;
             SOME ;
             SWAP ;
             UPDATE ;
             SWAP ;
             PAIR ;
             UNIT ;
             PAIR %result %storage ;
             SWAP ;
             PAIR %operations } ;
         SWAP ;
         LAMBDA
           (pair (pair %in_param
                    (pair %habit
                       (pair (pair (address %checker) (timestamp %deadLine))
                             (pair (bytes %goal) (nat %goalAmount)))
                       (pair (pair (int %lengthOfTime) (mutez %penalty))
                             (pair (address %retour) (pair (mutez %stake) (timestamp %startTime)))))
                    (nat %key))
                 (pair %in_storage
                    (mutez %burned)
                    (big_map %mapping
                       nat
                       (pair (pair (pair (address %checker) (timestamp %deadLine))
                                   (pair (bytes %goal) (nat %goalAmount)))
                             (pair (pair (int %lengthOfTime) (mutez %penalty))
                                   (pair (address %retour) (pair (mutez %stake) (timestamp %startTime))))))))
           (pair (list %operations operation)
                 (pair (unit %result)
                       (pair %storage
                          (mutez %burned)
                          (big_map %mapping
                             nat
                             (pair (pair (pair (address %checker) (timestamp %deadLine))
                                         (pair (bytes %goal) (nat %goalAmount)))
                                   (pair (pair (int %lengthOfTime) (mutez %penalty))
                                         (pair (address %retour) (pair (mutez %stake) (timestamp %startTime)))))))))
           { NIL operation ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CDR ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             { CAR ; CDR } ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             { CAR ; CAR } ;
             DUP ;
             { CDR ; CAR ; CDR } ;
             SWAP ;
             DUP ;
             DUG 2 ;
             { CDR ; CDR ; CDR ; CAR } ;
             COMPARE ;
             GE ;
             IF { DUP ; { CAR ; CDR ; CDR } ; PUSH nat 0 ; COMPARE ; LT }
                { PUSH bool False } ;
             IF { DIG 4 ;
                  DROP ;
                  DUP ;
                  DUP ;
                  CAR ;
                  SWAP ;
                  CDR ;
                  DUP ;
                  CAR ;
                  SWAP ;
                  CDR ;
                  DUP ;
                  CAR ;
                  SWAP ;
                  CDR ;
                  DUP ;
                  CDR ;
                  SWAP ;
                  CAR ;
                  DIG 5 ;
                  { CDR ; CAR ; CDR } ;
                  SWAP ;
                  SUB ;
                  PAIR ;
                  SWAP ;
                  PAIR ;
                  SWAP ;
                  PAIR ;
                  SWAP ;
                  PAIR ;
                  DIG 2 ;
                  DUP ;
                  CDR ;
                  SWAP ;
                  CAR ;
                  DIG 2 ;
                  DUP ;
                  DUG 3 ;
                  { CDR ; CAR ; CDR } ;
                  ADD ;
                  PAIR ;
                  DUG 2 }
                { DUP ;
                  { CDR ; CAR ; CDR } ;
                  SWAP ;
                  DUP ;
                  DUG 2 ;
                  { CDR ; CDR ; CDR ; CAR } ;
                  COMPARE ;
                  GE ;
                  IF { DUP ; { CAR ; CDR ; CDR } ; PUSH nat 0 ; COMPARE ; EQ }
                     { PUSH bool False } ;
                  IF { DIG 4 ;
                       DROP ;
                       DIG 2 ;
                       DUP ;
                       CDR ;
                       SWAP ;
                       CAR ;
                       DIG 2 ;
                       DUP ;
                       DUG 3 ;
                       { CDR ; CAR ; CDR } ;
                       ADD ;
                       PAIR ;
                       DUG 2 ;
                       DUP ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       DUP ;
                       CDR ;
                       SWAP ;
                       CAR ;
                       DIG 5 ;
                       { CDR ; CAR ; CDR } ;
                       SWAP ;
                       SUB ;
                       PAIR ;
                       SWAP ;
                       PAIR ;
                       SWAP ;
                       PAIR ;
                       SWAP ;
                       PAIR ;
                       DIG 3 ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       { CDR ; CDR ; CAR } ;
                       CONTRACT unit ;
                       { IF_NONE { PUSH int 111 ; FAILWITH } {} } ;
                       DIG 2 ;
                       DUP ;
                       DUG 3 ;
                       { CDR ; CDR ; CDR ; CAR } ;
                       UNIT ;
                       TRANSFER_TOKENS ;
                       CONS ;
                       DUG 3 ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       { CDR ; CDR } ;
                       PUSH mutez 0 ;
                       PAIR ;
                       SWAP ;
                       PAIR ;
                       SWAP ;
                       PAIR ;
                       SWAP ;
                       PAIR }
                     { DIG 4 ;
                       DROP ;
                       DIG 2 ;
                       DUP ;
                       CDR ;
                       SWAP ;
                       CAR ;
                       DIG 2 ;
                       DUP ;
                       DUG 3 ;
                       { CDR ; CDR ; CDR ; CAR } ;
                       ADD ;
                       PAIR ;
                       DUG 2 ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       { CDR ; CDR } ;
                       PUSH mutez 0 ;
                       PAIR ;
                       SWAP ;
                       PAIR ;
                       SWAP ;
                       PAIR ;
                       SWAP ;
                       PAIR } } ;
             DIG 2 ;
             DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DIG 3 ;
             DIG 3 ;
             SOME ;
             SWAP ;
             UPDATE ;
             SWAP ;
             PAIR ;
             UNIT ;
             PAIR %result %storage ;
             SWAP ;
             PAIR %operations } ;
         SWAP ;
         DUP ;
         CDR ;
         SWAP ;
         CAR ;
         IF_LEFT
           { IF_LEFT
               { SWAP ;
                 DUP ;
                 CDR ;
                 SWAP ;
                 CAR ;
                 AMOUNT ;
                 ADD ;
                 PAIR ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET ;
                 { IF_NONE { PUSH int 164 ; FAILWITH } {} } ;
                 DUP ;
                 { CAR ; CAR ; CDR } ;
                 NOW ;
                 COMPARE ;
                 GT ;
                 IF { DUP ;
                      DUP ;
                      CAR ;
                      SWAP ;
                      CDR ;
                      DUP ;
                      CAR ;
                      SWAP ;
                      CDR ;
                      DUP ;
                      CAR ;
                      SWAP ;
                      { CDR ; CAR } ;
                      DIG 4 ;
                      DUP ;
                      { CDR ; CDR ; CDR ; CDR } ;
                      SWAP ;
                      { CDR ; CAR ; CAR } ;
                      ADD ;
                      SWAP ;
                      PAIR ;
                      SWAP ;
                      PAIR ;
                      SWAP ;
                      PAIR ;
                      SWAP ;
                      PAIR ;
                      DUP ;
                      DUP ;
                      CDR ;
                      SWAP ;
                      CAR ;
                      DUP ;
                      CDR ;
                      SWAP ;
                      { CAR ; CAR } ;
                      DIG 3 ;
                      DUP ;
                      { CAR ; CAR ; CDR } ;
                      SWAP ;
                      { CDR ; CAR ; CAR } ;
                      ADD ;
                      SWAP ;
                      PAIR ;
                      PAIR ;
                      PAIR ;
                      DIG 3 ;
                      DUP ;
                      DUG 4 ;
                      DIG 3 ;
                      DIG 3 ;
                      DUP ;
                      DUG 4 ;
                      DIG 3 ;
                      DUP ;
                      DUG 4 ;
                      PAIR %habit %key ;
                      PAIR %in_param %in_storage ;
                      EXEC ;
                      DUP ;
                      { CDR ; CDR } ;
                      DUG 3 ;
                      DUP ;
                      CAR ;
                      NIL operation ;
                      SWAP ;
                      ITER { CONS } ;
                      SWAP ;
                      DROP ;
                      SWAP ;
                      DROP ;
                      SWAP ;
                      DROP ;
                      DIG 2 ;
                      DROP ;
                      DIG 2 ;
                      DROP }
                    { DROP 2 ; SWAP ; DROP ; SWAP ; DROP ; NIL operation } }
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET ;
                 { IF_NONE { PUSH int 125 ; FAILWITH } {} } ;
                 DUP ;
                 { CAR ; CAR ; CAR } ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 IF {} { PUSH string "Only checker can mark as done" ; FAILWITH } ;
                 DUP ;
                 { CAR ; CDR ; CDR } ;
                 PUSH nat 0 ;
                 COMPARE ;
                 NEQ ;
                 IF {} { PUSH string "This habit is finished" ; FAILWITH } ;
                 DUP ;
                 { CDR ; CDR ; CDR ; CDR } ;
                 NOW ;
                 SWAP ;
                 COMPARE ;
                 LE ;
                 IF {} { PUSH string "Current time period must be started" ; FAILWITH } ;
                 DUP ;
                 CAR ;
                 SWAP ;
                 CDR ;
                 DUP ;
                 CAR ;
                 SWAP ;
                 CDR ;
                 DUP ;
                 CAR ;
                 SWAP ;
                 CDR ;
                 DUP ;
                 CDR ;
                 SWAP ;
                 CAR ;
                 AMOUNT ;
                 ADD ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 DUP ;
                 DUP ;
                 CDR ;
                 SWAP ;
                 CAR ;
                 DUP ;
                 CAR ;
                 SWAP ;
                 { CDR ; CAR } ;
                 PUSH nat 1 ;
                 DIG 4 ;
                 { CAR ; CDR ; CDR } ;
                 SUB ;
                 ABS ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 PAIR ;
                 DUP ;
                 { CDR ; CDR ; CDR ; CDR } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 { CAR ; CAR ; CDR } ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 DUP ;
                 CAR ;
                 SWAP ;
                 CDR ;
                 DUP ;
                 CAR ;
                 SWAP ;
                 CDR ;
                 DUP ;
                 CAR ;
                 SWAP ;
                 { CDR ; CAR } ;
                 DIG 6 ;
                 DUP ;
                 { CDR ; CDR ; CDR ; CDR } ;
                 SWAP ;
                 { CDR ; CAR ; CAR } ;
                 ADD ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 DUP ;
                 DUG 3 ;
                 DUP ;
                 CDR ;
                 SWAP ;
                 CAR ;
                 DUP ;
                 CDR ;
                 SWAP ;
                 { CAR ; CAR } ;
                 DIG 5 ;
                 DUP ;
                 { CAR ; CAR ; CDR } ;
                 SWAP ;
                 { CDR ; CAR ; CAR } ;
                 ADD ;
                 SWAP ;
                 PAIR ;
                 PAIR ;
                 PAIR ;
                 DUG 2 ;
                 DUP ;
                 NOW ;
                 COMPARE ;
                 GT ;
                 IF { DIG 5 ;
                      DUP ;
                      DUG 6 ;
                      DIG 5 ;
                      DIG 5 ;
                      DUP ;
                      DUG 6 ;
                      DIG 5 ;
                      DUP ;
                      DUG 6 ;
                      PAIR %habit %key ;
                      PAIR %in_param %in_storage ;
                      EXEC ;
                      DUP ;
                      { CDR ; CDR } ;
                      DUG 5 ;
                      DUP ;
                      CAR ;
                      NIL operation ;
                      SWAP ;
                      ITER { CONS } ;
                      SWAP ;
                      DROP ;
                      SWAP ;
                      DROP ;
                      SWAP ;
                      DROP ;
                      SWAP ;
                      DROP ;
                      SWAP ;
                      DROP ;
                      DIG 2 ;
                      DROP ;
                      DIG 2 ;
                      DROP }
                    { DROP 2 ;
                      DUP ;
                      { CAR ; CDR ; CDR } ;
                      PUSH nat 0 ;
                      COMPARE ;
                      EQ ;
                      IF { DIG 3 ;
                           DROP ;
                           DIG 3 ;
                           DROP ;
                           DUP ;
                           { CDR ; CDR ; CAR } ;
                           CONTRACT unit ;
                           NIL operation ;
                           SWAP ;
                           { IF_NONE { PUSH int 147 ; FAILWITH } {} } ;
                           DIG 2 ;
                           DUP ;
                           DUG 3 ;
                           { CDR ; CDR ; CDR ; CAR } ;
                           UNIT ;
                           TRANSFER_TOKENS ;
                           CONS ;
                           SWAP ;
                           DUP ;
                           CAR ;
                           SWAP ;
                           CDR ;
                           DUP ;
                           CAR ;
                           SWAP ;
                           CDR ;
                           DUP ;
                           CAR ;
                           SWAP ;
                           { CDR ; CDR } ;
                           PUSH mutez 0 ;
                           PAIR ;
                           SWAP ;
                           PAIR ;
                           SWAP ;
                           PAIR ;
                           SWAP ;
                           PAIR ;
                           SWAP ;
                           DIG 3 ;
                           DUP ;
                           CAR ;
                           SWAP ;
                           CDR ;
                           DIG 4 ;
                           DIG 4 ;
                           SOME ;
                           SWAP ;
                           UPDATE ;
                           SWAP ;
                           PAIR ;
                           SWAP }
                         { DIG 3 ;
                           DROP ;
                           DIG 3 ;
                           DROP ;
                           DIG 2 ;
                           DUP ;
                           CAR ;
                           SWAP ;
                           CDR ;
                           DIG 3 ;
                           DIG 3 ;
                           SOME ;
                           SWAP ;
                           UPDATE ;
                           SWAP ;
                           PAIR ;
                           NIL operation } } } }
           { IF_LEFT
               { PUSH mutez 0 ;
                 AMOUNT ;
                 COMPARE ;
                 GT ;
                 IF {} { PUSH string "Some stake is necessary" ; FAILWITH } ;
                 DUP ;
                 { CAR ; CDR ; CDR } ;
                 PUSH nat 0 ;
                 COMPARE ;
                 LT ;
                 IF {} { PUSH string "Goal should be some time in the future" ; FAILWITH } ;
                 DUP ;
                 { CDR ; CAR ; CDR } ;
                 PUSH int 0 ;
                 COMPARE ;
                 LT ;
                 IF {} { PUSH string "Goal should be some time in the future" ; FAILWITH } ;
                 DUP ;
                 { CDR ; CDR ; CAR } ;
                 AMOUNT ;
                 SWAP ;
                 COMPARE ;
                 LE ;
                 IF {} { PUSH string "Penalty can not be higher than stake" ; FAILWITH } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 { CDR ; CAR ; CAR } ;
                 MEM ;
                 IF { PUSH string "Key must not be used" ; FAILWITH }
                    { DIG 2 ; DROP ; DIG 2 ; DROP } ;
                 SWAP ;
                 DUP ;
                 CAR ;
                 SWAP ;
                 CDR ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 { CDR ; CAR ; CAR } ;
                 NOW ;
                 AMOUNT ;
                 PAIR %stake %startTime ;
                 DIG 4 ;
                 DUP ;
                 DUG 5 ;
                 { CDR ; CDR ; CDR } ;
                 PAIR %retour ;
                 DIG 4 ;
                 DUP ;
                 { CDR ; CDR ; CAR } ;
                 SWAP ;
                 DUP ;
                 DUG 6 ;
                 { CDR ; CAR ; CDR } ;
                 PAIR %lengthOfTime %penalty ;
                 PAIR ;
                 DIG 4 ;
                 DUP ;
                 { CAR ; CDR ; CDR } ;
                 SWAP ;
                 DUP ;
                 DUG 6 ;
                 { CAR ; CDR ; CAR } ;
                 PAIR %goal %goalAmount ;
                 NOW ;
                 DIG 6 ;
                 DUP ;
                 DUG 7 ;
                 { CDR ; CAR ; CDR } ;
                 ADD ;
                 DIG 6 ;
                 { CAR ; CAR } ;
                 PAIR %checker %deadLine ;
                 PAIR ;
                 PAIR ;
                 SOME ;
                 SWAP ;
                 UPDATE ;
                 SWAP ;
                 PAIR ;
                 NIL operation }
               { DROP ;
                 SENDER ;
                 PUSH address "tz1Rp4Bv8iUhYnNoCryHQgNzN2D7i3L1LF9C" ;
                 COMPARE ;
                 EQ ;
                 IF { SWAP ; DROP ; SWAP ; DROP }
                    { PUSH string "Only owner can withdraw" ; FAILWITH } ;
                 DUP ;
                 CDR ;
                 SWAP ;
                 CAR ;
                 AMOUNT ;
                 ADD ;
                 PAIR ;
                 NIL operation ;
                 PUSH address "tz1Rp4Bv8iUhYnNoCryHQgNzN2D7i3L1LF9C" ;
                 CONTRACT unit ;
                 { IF_NONE { PUSH int 181 ; FAILWITH } {} } ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CAR ;
                 UNIT ;
                 TRANSFER_TOKENS ;
                 CONS ;
                 SWAP ;
                 CDR ;
                 PUSH mutez 0 ;
                 PAIR ;
                 SWAP } } ;
         NIL operation ;
         SWAP ;
         ITER { CONS } ;
         PAIR } }
