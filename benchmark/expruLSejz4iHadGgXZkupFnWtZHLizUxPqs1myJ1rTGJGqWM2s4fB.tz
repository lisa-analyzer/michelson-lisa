{ parameter
    (or (pair %addData (string %conversionKey) (int %rate))
        (or (address %addProvider) (string %getDataFromOrO))) ;
  storage
    (pair (pair (address %admin)
                (pair (int %average)
                      (map %conversionData string (map address (pair (int %rate) (timestamp %updatedAt))))))
          (pair (int %counter) (pair (set %providers address) (int %sum)))) ;
  code { DUP ;
         CDR ;
         SWAP ;
         CAR ;
         IF_LEFT
           { SWAP ;
             DUP ;
             DUG 2 ;
             { CDR ; CDR ; CAR } ;
             SENDER ;
             MEM ;
             IF {}
                { PUSH string "WrongCondition: self.data.providers.contains(sp.sender)" ;
                  FAILWITH } ;
             SWAP ;
             DUP ;
             DUG 2 ;
             { CAR ; CDR ; CDR } ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             MEM ;
             IF { SWAP ;
                  DUP ;
                  CDR ;
                  SWAP ;
                  CAR ;
                  DUP ;
                  CAR ;
                  SWAP ;
                  CDR ;
                  DUP ;
                  CAR ;
                  SWAP ;
                  CDR ;
                  DUP ;
                  DIG 5 ;
                  DUP ;
                  DUG 6 ;
                  CAR ;
                  DUP ;
                  DUG 2 ;
                  GET ;
                  { IF_NONE { PUSH int 21 ; FAILWITH } {} } ;
                  SENDER ;
                  NOW ;
                  DIG 8 ;
                  CDR ;
                  PAIR %rate %updatedAt ;
                  SOME ;
                  SWAP ;
                  UPDATE ;
                  SOME ;
                  SWAP ;
                  UPDATE ;
                  SWAP ;
                  PAIR ;
                  SWAP ;
                  PAIR ;
                  PAIR }
                { SWAP ;
                  DUP ;
                  CDR ;
                  SWAP ;
                  CAR ;
                  DUP ;
                  CAR ;
                  SWAP ;
                  CDR ;
                  DUP ;
                  CAR ;
                  SWAP ;
                  CDR ;
                  DIG 4 ;
                  DUP ;
                  DUG 5 ;
                  CAR ;
                  EMPTY_MAP address (pair (int %rate) (timestamp %updatedAt)) ;
                  NOW ;
                  DIG 7 ;
                  CDR ;
                  PAIR %rate %updatedAt ;
                  SOME ;
                  SENDER ;
                  UPDATE ;
                  SOME ;
                  SWAP ;
                  UPDATE ;
                  SWAP ;
                  PAIR ;
                  SWAP ;
                  PAIR ;
                  PAIR } ;
             NIL operation }
           { IF_LEFT
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 { CAR ; CAR } ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 IF {}
                    { PUSH string "WrongCondition: sp.sender == self.data.admin" ; FAILWITH } ;
                 SWAP ;
                 DUP ;
                 CAR ;
                 SWAP ;
                 CDR ;
                 DUP ;
                 CAR ;
                 SWAP ;
                 CDR ;
                 DUP ;
                 CDR ;
                 SWAP ;
                 CAR ;
                 PUSH bool True ;
                 DIG 5 ;
                 UPDATE ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 NIL operation }
               { PUSH mutez 5000 ;
                 AMOUNT ;
                 COMPARE ;
                 EQ ;
                 IF {}
                    { PUSH string "WrongCondition: sp.amount == sp.mutez(5000)" ; FAILWITH } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 { CAR ; CDR ; CDR } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 MEM ;
                 IF { SWAP ;
                      DUP ;
                      DUG 2 ;
                      { CAR ; CDR ; CDR } ;
                      SWAP ;
                      DUP ;
                      DUG 2 ;
                      GET ;
                      { IF_NONE { PUSH int 27 ; FAILWITH } {} } ;
                      ITER { DUP ;
                             { CDR ; CDR } ;
                             NOW ;
                             SWAP ;
                             PUSH int 300 ;
                             ADD ;
                             COMPARE ;
                             GT ;
                             IF { DIG 2 ;
                                  DUP ;
                                  CAR ;
                                  SWAP ;
                                  CDR ;
                                  DUP ;
                                  CDR ;
                                  SWAP ;
                                  CAR ;
                                  PUSH int 1 ;
                                  ADD ;
                                  PAIR ;
                                  SWAP ;
                                  PAIR ;
                                  DUP ;
                                  CAR ;
                                  SWAP ;
                                  CDR ;
                                  DUP ;
                                  CAR ;
                                  SWAP ;
                                  CDR ;
                                  DUP ;
                                  CAR ;
                                  SWAP ;
                                  CDR ;
                                  DIG 4 ;
                                  { CDR ; CAR } ;
                                  ADD ;
                                  SWAP ;
                                  PAIR ;
                                  SWAP ;
                                  PAIR ;
                                  SWAP ;
                                  PAIR ;
                                  SWAP }
                                { DROP } } ;
                      SWAP ;
                      DUP ;
                      { CDR ; CAR } ;
                      SWAP ;
                      DUP ;
                      DUG 3 ;
                      { CDR ; CDR ; CDR } ;
                      COMPARE ;
                      GE ;
                      LOOP { SWAP ;
                             DUP ;
                             CDR ;
                             SWAP ;
                             CAR ;
                             DUP ;
                             CAR ;
                             SWAP ;
                             CDR ;
                             DUP ;
                             CDR ;
                             SWAP ;
                             CAR ;
                             PUSH int 1 ;
                             ADD ;
                             PAIR ;
                             SWAP ;
                             PAIR ;
                             PAIR ;
                             DUP ;
                             DUG 2 ;
                             DUP ;
                             CAR ;
                             SWAP ;
                             CDR ;
                             DUP ;
                             CAR ;
                             SWAP ;
                             CDR ;
                             DUP ;
                             CAR ;
                             SWAP ;
                             CDR ;
                             DIG 5 ;
                             { CDR ; CAR } ;
                             SWAP ;
                             SUB ;
                             SWAP ;
                             PAIR ;
                             SWAP ;
                             PAIR ;
                             SWAP ;
                             PAIR ;
                             DUP ;
                             { CDR ; CAR } ;
                             SWAP ;
                             DUP ;
                             DUG 3 ;
                             { CDR ; CDR ; CDR } ;
                             COMPARE ;
                             GE } ;
                      DROP ;
                      NIL operation ;
                      SENDER ;
                      CONTRACT %receiveDataFromOrO int ;
                      { IF_NONE { PUSH int 39 ; FAILWITH } {} } ;
                      PUSH mutez 0 ;
                      DIG 3 ;
                      DUP ;
                      DUG 4 ;
                      { CAR ; CDR ; CAR } ;
                      TRANSFER_TOKENS ;
                      CONS ;
                      SWAP ;
                      DUP ;
                      CAR ;
                      SWAP ;
                      CDR ;
                      DUP ;
                      CAR ;
                      SWAP ;
                      { CDR ; CAR } ;
                      PUSH int 0 ;
                      SWAP ;
                      PAIR ;
                      SWAP ;
                      PAIR ;
                      SWAP ;
                      PAIR ;
                      DUP ;
                      CAR ;
                      SWAP ;
                      { CDR ; CDR } ;
                      PUSH int 0 ;
                      PAIR ;
                      SWAP ;
                      PAIR ;
                      DUP ;
                      CDR ;
                      SWAP ;
                      CAR ;
                      DUP ;
                      CAR ;
                      SWAP ;
                      { CDR ; CDR } ;
                      PUSH int 0 ;
                      PAIR ;
                      SWAP ;
                      PAIR ;
                      PAIR ;
                      SWAP }
                    { DROP ; NIL operation } } } ;
         PAIR } }
