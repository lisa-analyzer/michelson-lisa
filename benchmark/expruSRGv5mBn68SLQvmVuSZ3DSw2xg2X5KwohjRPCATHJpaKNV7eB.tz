{ parameter
    (or (or (or (pair %approve (address :spender) (pair (nat :allowance) (nat :currentAllowance)))
                (pair %addLiquidity
                   (pair (address :owner) (nat :minLqtMinted))
                   (pair (nat :maxTokensDeposited) (timestamp :deadline))))
            (or (pair %removeLiquidity
                   (pair (address :owner) (pair (address :to_) (nat :lqtBurned)))
                   (pair (mutez :minXtzWithdrawn) (pair (nat :minTokensWithdrawn) (timestamp :deadline))))
                (pair %xtzToToken (address :to_) (pair (nat :minTokensBought) (timestamp :deadline)))))
        (or (or (pair %tokenToXtz
                   (pair (address :owner) (address :to_))
                   (pair (nat :tokensSold) (pair (mutez :minXtzBought) (timestamp :deadline))))
                (nat %updateTokenPool))
            (or (pair %setBaker (option key_hash) bool) (unit %default)))) ;
  storage
    (pair (big_map address (pair nat (map address nat)))
          (pair (pair bool nat) (pair address (pair address nat)))) ;
  code { CAST (pair (or (or (or (pair address (pair nat nat)) (pair (pair address nat) (pair nat timestamp)))
                            (or (pair (pair address (pair address nat)) (pair mutez (pair nat timestamp)))
                                (pair address (pair nat timestamp))))
                        (or (or (pair (pair address address) (pair nat (pair mutez timestamp))) nat)
                            (or (pair (option key_hash) bool) unit)))
                    (pair (big_map address (pair nat (map address nat)))
                          (pair (pair bool nat) (pair address (pair address nat))))) ;
         DUP ;
         CAR ;
         DIP { CDR } ;
         IF_LEFT
           { IF_LEFT
               { IF_LEFT
                   { DIP { DUP } ;
                     SWAP ;
                     CAR ;
                     SENDER ;
                     GET ;
                     IF_NONE { PUSH nat 0 ; DIP { EMPTY_MAP address nat } ; PAIR } {} ;
                     DUP ;
                     CDR ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     CAR ;
                     GET ;
                     IF_NONE { PUSH nat 0 } {} ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     CDR ;
                     CDR ;
                     COMPARE ;
                     EQ ;
                     IF {} { PUSH string "Current allowance is not equal." ; FAILWITH } ;
                     DUP ;
                     CDR ;
                     DIG 2 ;
                     DUP ;
                     CAR ;
                     DIP { CDR ; CAR ; SOME } ;
                     UPDATE ;
                     DIP { DUP ; DIP { CAR } ; CDR } ;
                     DIP { DROP } ;
                     SWAP ;
                     PAIR ;
                     DIP { DUP ; CAR } ;
                     SOME ;
                     SENDER ;
                     UPDATE ;
                     DIP { DUP ; DIP { CDR } ; CAR } ;
                     DIP { DROP } ;
                     PAIR ;
                     NIL operation ;
                     PAIR }
                   { DUP ;
                     CDR ;
                     CDR ;
                     NOW ;
                     COMPARE ;
                     LT ;
                     IF {}
                        { PUSH string "addLiquidity: the current time must be less than the deadline." ;
                          FAILWITH } ;
                     DUP ;
                     CDR ;
                     CAR ;
                     PUSH nat 0 ;
                     COMPARE ;
                     LT ;
                     IF {}
                        { PUSH string "addLiquidity: maxTokensDeposited must be greater than zero." ;
                          FAILWITH } ;
                     AMOUNT ;
                     PUSH mutez 0 ;
                     COMPARE ;
                     LT ;
                     IF {}
                        { PUSH string
                               "addLiquidity: the amount of XTZ sent to the contract to be greater than zero." ;
                          FAILWITH } ;
                     DIP { DUP } ;
                     SWAP ;
                     CDR ;
                     CAR ;
                     CDR ;
                     INT ;
                     EQ ;
                     IF { AMOUNT ;
                          PUSH mutez 1000000 ;
                          COMPARE ;
                          LE ;
                          IF {}
                             { PUSH string
                                    "addLiquidity: the initial liquidity amount must be greater than or equal to 1 XTZ." ;
                               FAILWITH } ;
                          SWAP ;
                          BALANCE ;
                          DIP { PUSH mutez 1 } ;
                          EDIV ;
                          IF_NONE { PUSH string "" ; FAILWITH } { CAR } ;
                          DUP ;
                          DIP { DIP { DUP ; CDR } ;
                                DIP { DUP ; DIP { CDR } ; CAR } ;
                                DIP { DUP ; DIP { CAR } ; CDR } ;
                                DIP { DROP } ;
                                SWAP ;
                                PAIR ;
                                PAIR ;
                                DIP { DUP ; DIP { CAR } ; CDR } ;
                                DIP { DROP } ;
                                SWAP ;
                                PAIR } ;
                          SWAP ;
                          DIP 2 { DUP } ;
                          DIG 2 ;
                          CAR ;
                          CAR ;
                          DIP { DUP ; CAR } ;
                          GET ;
                          IF_NONE { PUSH nat 0 ; DIP { EMPTY_MAP address nat } ; PAIR } {} ;
                          DIG 2 ;
                          DIP { DUP ; DIP { CDR } ; CAR } ;
                          DIP { DROP } ;
                          PAIR ;
                          DIP { DUP ; CAR } ;
                          SOME ;
                          DIP 3 { DUP } ;
                          DIG 3 ;
                          CAR ;
                          CAR ;
                          UPDATE ;
                          DIP { DUP ; DIP { CDR } ; CAR } ;
                          DIP { DROP } ;
                          PAIR ;
                          DIP { DUP ; CDR ; CAR ; DIP { CAR ; CAR } } ;
                          DUP ;
                          CDR ;
                          CDR ;
                          CDR ;
                          CAR ;
                          CONTRACT %transfer (pair (pair address address) nat) ;
                          IF_NONE { FAILWITH } {} ;
                          PUSH mutez 0 ;
                          DIG 3 ;
                          SELF ;
                          ADDRESS ;
                          DIG 5 ;
                          PAIR ;
                          PAIR ;
                          TRANSFER_TOKENS ;
                          DIP { NIL operation } ;
                          CONS ;
                          PAIR }
                        { AMOUNT ;
                          BALANCE ;
                          SUB ;
                          DIP { PUSH mutez 1 } ;
                          EDIV ;
                          IF_NONE { PUSH string "" ; FAILWITH } { CAR } ;
                          AMOUNT ;
                          DIP { PUSH mutez 1 } ;
                          EDIV ;
                          IF_NONE { PUSH string "" ; FAILWITH } { CAR } ;
                          DUP ;
                          DIP 4 { DUP } ;
                          DIG 4 ;
                          CDR ;
                          CDR ;
                          CDR ;
                          CDR ;
                          MUL ;
                          DIP 2 { DUP } ;
                          DIG 2 ;
                          SWAP ;
                          EDIV ;
                          IF_NONE { FAILWITH } { CAR } ;
                          SWAP ;
                          DIP 4 { DUP } ;
                          DIG 4 ;
                          CDR ;
                          CAR ;
                          CDR ;
                          MUL ;
                          DIP { SWAP } ;
                          EDIV ;
                          IF_NONE { FAILWITH } { CAR } ;
                          DIP 2 { DUP } ;
                          DIG 2 ;
                          CAR ;
                          CDR ;
                          DIP { DUP } ;
                          COMPARE ;
                          LE ;
                          IF {}
                             { PUSH string "addLiquidity: lqtMinted must be greater or equal to minLqtCreated." ;
                               FAILWITH } ;
                          DIP { DIP { DUP } ;
                                SWAP ;
                                CDR ;
                                CAR ;
                                DIP { DUP } ;
                                COMPARE ;
                                GE ;
                                IF {}
                                   { PUSH string
                                          "addLiquidity: maxTokensDeposited must be greater than or equal to tokens_deposited." ;
                                     FAILWITH } } ;
                          DIP 3 { DUP } ;
                          DIG 3 ;
                          DIP 3 { DUP } ;
                          DIG 3 ;
                          CAR ;
                          CAR ;
                          DIP { CAR } ;
                          GET ;
                          IF_NONE { PUSH nat 0 ; DIP { EMPTY_MAP address nat } ; PAIR } {} ;
                          DUP ;
                          CAR ;
                          DIP 2 { DUP } ;
                          DIG 2 ;
                          ADD ;
                          DIP { DUP ; DIP { CDR } ; CAR } ;
                          DIP { DROP } ;
                          PAIR ;
                          SOME ;
                          DIP 3 { DUP } ;
                          DIG 3 ;
                          CAR ;
                          CAR ;
                          DIP { DIP { DIG 3 ; DUP ; CAR } } ;
                          UPDATE ;
                          DIP { DUP ; DIP { CDR } ; CAR } ;
                          DIP { DROP } ;
                          PAIR ;
                          DUP ;
                          CDR ;
                          CAR ;
                          CDR ;
                          DIG 2 ;
                          ADD ;
                          DIP { DUP ; CDR } ;
                          DIP { DUP ; DIP { CDR } ; CAR } ;
                          DIP { DUP ; DIP { CAR } ; CDR } ;
                          DIP { DROP } ;
                          SWAP ;
                          PAIR ;
                          PAIR ;
                          DIP { DUP ; DIP { CAR } ; CDR } ;
                          DIP { DROP } ;
                          SWAP ;
                          PAIR ;
                          DUP ;
                          CDR ;
                          CDR ;
                          CDR ;
                          CDR ;
                          DIP 2 { DUP } ;
                          DIG 2 ;
                          ADD ;
                          DIP { DUP ; CDR } ;
                          DIP { DUP ; DIP { CAR } ; CDR } ;
                          DIP { DUP ; DIP { CAR } ; CDR } ;
                          DIP { DUP ; DIP { CAR } ; CDR } ;
                          DIP { DROP } ;
                          SWAP ;
                          PAIR ;
                          SWAP ;
                          PAIR ;
                          SWAP ;
                          PAIR ;
                          DIP { DUP ; DIP { CAR } ; CDR } ;
                          DIP { DROP } ;
                          SWAP ;
                          PAIR ;
                          DIP { DIP { CAR ; CAR } } ;
                          DUP ;
                          CDR ;
                          CDR ;
                          CDR ;
                          CAR ;
                          CONTRACT %transfer (pair (pair address address) nat) ;
                          IF_NONE { FAILWITH } {} ;
                          PUSH mutez 0 ;
                          DIG 3 ;
                          SELF ;
                          ADDRESS ;
                          DIG 5 ;
                          PAIR ;
                          PAIR ;
                          TRANSFER_TOKENS ;
                          DIP { NIL operation } ;
                          CONS ;
                          PAIR } } }
               { IF_LEFT
                   { DUP ;
                     CDR ;
                     CDR ;
                     CDR ;
                     NOW ;
                     COMPARE ;
                     LT ;
                     IF {}
                        { PUSH string "removeLiquidity: the current time must be less than the deadline." ;
                          FAILWITH } ;
                     DUP ;
                     CDR ;
                     CAR ;
                     PUSH mutez 0 ;
                     COMPARE ;
                     LT ;
                     IF {}
                        { PUSH string "removeLiquidity: minXtzWithdrawn must be greater than zero." ;
                          FAILWITH } ;
                     DUP ;
                     CDR ;
                     CDR ;
                     CAR ;
                     PUSH nat 0 ;
                     COMPARE ;
                     LT ;
                     IF {}
                        { PUSH string "removeLiquidity: minTokensWithdrawn must be greater than zero." ;
                          FAILWITH } ;
                     DUP ;
                     CAR ;
                     CDR ;
                     CDR ;
                     PUSH nat 0 ;
                     COMPARE ;
                     LT ;
                     IF {}
                        { PUSH string "removeLiquidity: lqtBurned must be greater than zero." ;
                          FAILWITH } ;
                     DUP ;
                     CAR ;
                     CAR ;
                     DIP { DIP { DUP } ; SWAP ; CAR } ;
                     GET ;
                     IF_NONE { PUSH string "owner has no liquidity" ; FAILWITH } {} ;
                     SWAP ;
                     DUP ;
                     CAR ;
                     CDR ;
                     CDR ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     CAR ;
                     COMPARE ;
                     GE ;
                     IF {}
                        { PUSH string "lqtBurned cannot be greater than the owner's balance." ;
                          FAILWITH } ;
                     DUP ;
                     CAR ;
                     CAR ;
                     SENDER ;
                     COMPARE ;
                     EQ ;
                     IF { SWAP ; CAR }
                        { SWAP ;
                          DUP ;
                          CDR ;
                          SENDER ;
                          GET ;
                          IF_NONE { PUSH string "sender has no approval amount" ; FAILWITH } {} ;
                          DIP { SWAP ; DUP ; CAR ; CDR ; CDR } ;
                          COMPARE ;
                          GE ;
                          IF {}
                             { PUSH string "sender's allowance cannot be less than lqtBurned." ; FAILWITH } ;
                          SWAP ;
                          CAR } ;
                     DIP { DUP } ;
                     SWAP ;
                     CAR ;
                     CDR ;
                     CDR ;
                     BALANCE ;
                     DIP { PUSH mutez 1 } ;
                     EDIV ;
                     IF_NONE { PUSH string "" ; FAILWITH } { CAR } ;
                     MUL ;
                     DIP { DIP 2 { DUP } ; DIG 2 ; CDR ; CAR ; CDR } ;
                     EDIV ;
                     IF_NONE { PUSH string "" ; FAILWITH } { CAR } ;
                     PUSH mutez 1 ;
                     MUL ;
                     DUP ;
                     DIP 3 { DUP } ;
                     DIG 3 ;
                     CDR ;
                     CAR ;
                     COMPARE ;
                     LE ;
                     IF {}
                        { PUSH string "xtzWithdrawn must be greater than or equal to minXtzWithdrawn." ;
                          FAILWITH } ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     CAR ;
                     CDR ;
                     CDR ;
                     DIP { DIP 3 { DUP } ;
                           DIG 3 ;
                           DUP ;
                           CDR ;
                           CAR ;
                           CDR ;
                           SWAP ;
                           CDR ;
                           CDR ;
                           CDR ;
                           CDR } ;
                     MUL ;
                     EDIV ;
                     IF_NONE { PUSH string "" ; FAILWITH } { CAR } ;
                     DIP 3 { DUP } ;
                     DIG 3 ;
                     CAR ;
                     CDR ;
                     CDR ;
                     DIG 3 ;
                     DUP ;
                     DIP { SUB ;
                           DUP ;
                           PUSH int 0 ;
                           COMPARE ;
                           LE ;
                           IF { ABS } { PUSH string "" ; FAILWITH } } ;
                     SWAP ;
                     DIG 5 ;
                     DUP ;
                     DIP 6 { DUP } ;
                     DIG 6 ;
                     CAR ;
                     CAR ;
                     DIP { CAR } ;
                     GET ;
                     IF_NONE { PUSH nat 0 ; DIP { EMPTY_MAP address nat } ; PAIR } {} ;
                     DIG 2 ;
                     DIP { DUP ; DIP { CDR } ; CAR } ;
                     DIP { DROP } ;
                     PAIR ;
                     DIP { DUP ; CAR } ;
                     SOME ;
                     DIP 6 { DUP } ;
                     DIG 6 ;
                     CAR ;
                     CAR ;
                     UPDATE ;
                     DIP { DUP ; DIP { CDR } ; CAR } ;
                     DIP { DROP } ;
                     PAIR ;
                     DUP ;
                     CDR ;
                     CAR ;
                     CDR ;
                     DIP 5 { DUP } ;
                     DIG 5 ;
                     CAR ;
                     CDR ;
                     CDR ;
                     SWAP ;
                     SUB ;
                     DUP ;
                     PUSH int 0 ;
                     COMPARE ;
                     LE ;
                     IF { ABS } { PUSH string "" ; FAILWITH } ;
                     DIP { DUP ; CDR } ;
                     DIP { DUP ; DIP { CDR } ; CAR } ;
                     DIP { DUP ; DIP { CAR } ; CDR } ;
                     DIP { DROP } ;
                     SWAP ;
                     PAIR ;
                     PAIR ;
                     DIP { DUP ; DIP { CAR } ; CDR } ;
                     DIP { DROP } ;
                     SWAP ;
                     PAIR ;
                     DUP ;
                     CDR ;
                     CDR ;
                     CDR ;
                     CDR ;
                     DIP 3 { DUP } ;
                     DIG 3 ;
                     SWAP ;
                     SUB ;
                     DUP ;
                     PUSH int 0 ;
                     COMPARE ;
                     LE ;
                     IF { ABS } { PUSH string "" ; FAILWITH } ;
                     DIP { DUP ; CDR } ;
                     DIP { DUP ; DIP { CAR } ; CDR } ;
                     DIP { DUP ; DIP { CAR } ; CDR } ;
                     DIP { DUP ; DIP { CAR } ; CDR } ;
                     DIP { DROP } ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     DIP { DUP ; DIP { CAR } ; CDR } ;
                     DIP { DROP } ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     SENDER ;
                     DIP 5 { DUP } ;
                     DIG 5 ;
                     CAR ;
                     CAR ;
                     DUP ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     COMPARE ;
                     EQ ;
                     IF { DROP ; DROP ; DROP }
                        { DUP ;
                          DIP 4 { DUP } ;
                          DIG 4 ;
                          SWAP ;
                          DIP { CAR } ;
                          GET ;
                          IF_NONE { PUSH nat 0 ; DIP { EMPTY_MAP address nat } ; PAIR } {} ;
                          DUP ;
                          CDR ;
                          DIG 4 ;
                          SOME ;
                          DIG 4 ;
                          UPDATE ;
                          DIP { DUP ; DIP { CAR } ; CDR } ;
                          DIP { DROP } ;
                          SWAP ;
                          PAIR ;
                          SOME ;
                          SWAP ;
                          DIP { DIP { DUP ; CAR } } ;
                          UPDATE ;
                          DIP { DUP ; DIP { CDR } ; CAR } ;
                          DIP { DROP } ;
                          PAIR } ;
                     DIP 3 { DUP } ;
                     DIG 3 ;
                     CAR ;
                     CDR ;
                     CAR ;
                     CONTRACT unit ;
                     IF_NONE { FAILWITH } {} ;
                     DIG 3 ;
                     PUSH unit Unit ;
                     TRANSFER_TOKENS ;
                     NIL operation ;
                     SWAP ;
                     CONS ;
                     DIP { DIP { DIP { DUP ; CAR ; CAR ; DIP { CAR ; CDR ; CAR } } } ;
                           DUP ;
                           CDR ;
                           CDR ;
                           CDR ;
                           CAR ;
                           CONTRACT %transfer (pair (pair address address) nat) ;
                           IF_NONE { FAILWITH } {} ;
                           PUSH mutez 0 ;
                           DIG 3 ;
                           DIG 5 ;
                           DIG 5 ;
                           PAIR ;
                           PAIR ;
                           TRANSFER_TOKENS } ;
                     SWAP ;
                     CONS ;
                     PAIR }
                   { DUP ;
                     CDR ;
                     CDR ;
                     NOW ;
                     COMPARE ;
                     LE ;
                     IF {}
                        { PUSH string "xtzToToken: the current time must be less than the deadline." ;
                          FAILWITH } ;
                     AMOUNT ;
                     BALANCE ;
                     SUB ;
                     DIP { PUSH mutez 1 } ;
                     EDIV ;
                     IF_NONE { PUSH string "" ; FAILWITH } { CAR } ;
                     PUSH nat 1000 ;
                     MUL ;
                     AMOUNT ;
                     DIP { PUSH mutez 1 } ;
                     EDIV ;
                     IF_NONE { PUSH string "" ; FAILWITH } { CAR } ;
                     DUP ;
                     DIP { PUSH nat 997 ; MUL ; ADD } ;
                     PUSH nat 997 ;
                     MUL ;
                     DIP 3 { DUP } ;
                     DIG 3 ;
                     CDR ;
                     CDR ;
                     CDR ;
                     CDR ;
                     MUL ;
                     EDIV ;
                     IF_NONE { PUSH string "" ; FAILWITH } { CAR } ;
                     DUP ;
                     DIP { DIP { DUP ; CDR ; CAR } ;
                           COMPARE ;
                           GE ;
                           IF {}
                              { PUSH string
                                     "xtz_to_token: tokens_bought must be greater than or equal to min_tokens_bought." ;
                                FAILWITH } } ;
                     DUP ;
                     DIP 3 { DUP } ;
                     DIG 3 ;
                     CDR ;
                     CDR ;
                     CDR ;
                     CDR ;
                     SUB ;
                     DUP ;
                     PUSH int 0 ;
                     COMPARE ;
                     LE ;
                     IF { ABS } { PUSH string "" ; FAILWITH } ;
                     DIP { DIG 2 } ;
                     DIP { DUP ; CDR } ;
                     DIP { DUP ; DIP { CAR } ; CDR } ;
                     DIP { DUP ; DIP { CAR } ; CDR } ;
                     DIP { DUP ; DIP { CAR } ; CDR } ;
                     DIP { DROP } ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     DIP { DUP ; DIP { CAR } ; CDR } ;
                     DIP { DROP } ;
                     SWAP ;
                     PAIR ;
                     DIP { DIP { CAR ; DIP { SELF ; ADDRESS } } } ;
                     DUP ;
                     CDR ;
                     CDR ;
                     CDR ;
                     CAR ;
                     CONTRACT %transfer (pair (pair address address) nat) ;
                     IF_NONE { FAILWITH } {} ;
                     PUSH mutez 0 ;
                     DIG 3 ;
                     DIG 5 ;
                     DIG 5 ;
                     PAIR ;
                     PAIR ;
                     TRANSFER_TOKENS ;
                     DIP { NIL operation } ;
                     CONS ;
                     PAIR } } }
           { IF_LEFT
               { IF_LEFT
                   { DUP ;
                     CDR ;
                     CDR ;
                     CDR ;
                     NOW ;
                     COMPARE ;
                     LE ;
                     IF {}
                        { PUSH string "tokenToXtz: the current time must be less than the deadline." ;
                          FAILWITH } ;
                     DUP ;
                     CDR ;
                     CAR ;
                     PUSH nat 997 ;
                     MUL ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     CDR ;
                     CDR ;
                     CDR ;
                     CDR ;
                     PUSH nat 1000 ;
                     MUL ;
                     ADD ;
                     DIP { DUP } ;
                     SWAP ;
                     CDR ;
                     CAR ;
                     PUSH nat 997 ;
                     MUL ;
                     AMOUNT ;
                     BALANCE ;
                     SUB ;
                     DIP { PUSH mutez 1 } ;
                     EDIV ;
                     IF_NONE { PUSH string "" ; FAILWITH } { CAR } ;
                     MUL ;
                     EDIV ;
                     IF_NONE { PUSH string "" ; FAILWITH } { CAR } ;
                     PUSH mutez 1 ;
                     MUL ;
                     DUP ;
                     DIP { DIP { DUP ; CDR ; CDR ; CAR } ;
                           COMPARE ;
                           GE ;
                           IF {}
                              { PUSH string
                                     "tokenToXtz: xtzBought must be greater than or equal to minXtzBought." ;
                                FAILWITH } } ;
                     DIP { SWAP ;
                           DUP ;
                           CDR ;
                           CDR ;
                           CDR ;
                           CDR ;
                           DIP 2 { DUP } ;
                           DIG 2 ;
                           CDR ;
                           CAR ;
                           ADD ;
                           DIP { DUP ; CDR } ;
                           DIP { DUP ; DIP { CAR } ; CDR } ;
                           DIP { DUP ; DIP { CAR } ; CDR } ;
                           DIP { DUP ; DIP { CAR } ; CDR } ;
                           DIP { DROP } ;
                           SWAP ;
                           PAIR ;
                           SWAP ;
                           PAIR ;
                           SWAP ;
                           PAIR ;
                           DIP { DUP ; DIP { CAR } ; CDR } ;
                           DIP { DROP } ;
                           SWAP ;
                           PAIR } ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     CAR ;
                     CDR ;
                     CONTRACT unit ;
                     IF_NONE { FAILWITH } {} ;
                     DIG 1 ;
                     PUSH unit Unit ;
                     TRANSFER_TOKENS ;
                     NIL operation ;
                     SWAP ;
                     CONS ;
                     DIP { DIP { DUP ; CDR ; CAR ; DIP { DUP ; CAR ; CAR ; DIP { CAR ; CDR } } } ;
                           DUP ;
                           CDR ;
                           CDR ;
                           CDR ;
                           CAR ;
                           CONTRACT %transfer (pair (pair address address) nat) ;
                           IF_NONE { FAILWITH } {} ;
                           PUSH mutez 0 ;
                           DIG 3 ;
                           DIG 5 ;
                           DIG 5 ;
                           PAIR ;
                           PAIR ;
                           TRANSFER_TOKENS } ;
                     SWAP ;
                     CONS ;
                     PAIR }
                   { DIP { DUP } ;
                     SWAP ;
                     CDR ;
                     CDR ;
                     CDR ;
                     CAR ;
                     SENDER ;
                     COMPARE ;
                     EQ ;
                     IF {}
                        { PUSH string "Only the tokenAddress can update the tokenPool." ; FAILWITH } ;
                     DIP { DUP ; CDR } ;
                     DIP { DUP ; DIP { CAR } ; CDR } ;
                     DIP { DUP ; DIP { CAR } ; CDR } ;
                     DIP { DUP ; DIP { CAR } ; CDR } ;
                     DIP { DROP } ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     DIP { DUP ; DIP { CAR } ; CDR } ;
                     DIP { DROP } ;
                     SWAP ;
                     PAIR ;
                     NIL operation ;
                     PAIR } }
               { IF_LEFT
                   { DIP { DUP } ;
                     SWAP ;
                     CDR ;
                     CDR ;
                     CAR ;
                     SENDER ;
                     COMPARE ;
                     EQ ;
                     IF {} { PUSH string "Only the manager can set the baker." ; FAILWITH } ;
                     DIP { DUP } ;
                     SWAP ;
                     CDR ;
                     CAR ;
                     CAR ;
                     NOT ;
                     IF {}
                        { PUSH string "Cannot change the baker while freezeBaker is set to True." ;
                          FAILWITH } ;
                     DUP ;
                     CAR ;
                     DIP { CDR } ;
                     SET_DELEGATE ;
                     DIP { DIP { DUP ; CDR } ;
                           DIP { DUP ; DIP { CDR } ; CAR } ;
                           DIP { DUP ; DIP { CDR } ; CAR } ;
                           DIP { DROP } ;
                           PAIR ;
                           PAIR ;
                           DIP { DUP ; DIP { CAR } ; CDR } ;
                           DIP { DROP } ;
                           SWAP ;
                           PAIR ;
                           NIL operation } ;
                     CONS ;
                     PAIR }
                   { DROP ; NIL operation ; PAIR } } } } }
