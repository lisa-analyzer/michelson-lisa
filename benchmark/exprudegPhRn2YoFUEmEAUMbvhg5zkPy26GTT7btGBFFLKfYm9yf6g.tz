{ parameter
    (or (pair %add_prepayment (int %amount) (string %txid))
        (pair %pay_ (pair (int %amount) (int %current_total)) (address %seller))) ;
  storage
    (pair (pair (map %expense_assets int (pair (int %eamount) (timestamp %edate)))
                (map %issuer_assets address int))
          (pair (address %owner)
                (map %prepayment_assets
                   string
                   (pair (pair (address %card_issuer) (int %pamount)) (timestamp %pdate))))) ;
  code { LAMBDA
           (pair (list %0 address) (address %1))
           bool
           { DUP ;
             CAR ;
             PUSH bool False ;
             SWAP ;
             ITER { SWAP ;
                    PAIR ;
                    DUP ;
                    CAR ;
                    DIP { DUP ; CDR ; DIP { DIP { DUP } ; SWAP ; CDR } ; COMPARE ; EQ } ;
                    OR ;
                    DIP { DROP } } ;
             DIP { DROP } } ;
         LAMBDA
           (pair (pair (map %expense_assets int (pair (int %eamount) (timestamp %edate)))
                       (map %issuer_assets address int))
                 (pair (address %owner)
                       (map %prepayment_assets
                          string
                          (pair (pair (address %card_issuer) (int %pamount)) (timestamp %pdate)))))
           (list address)
           { DUP ;
             NIL address ;
             SWAP ;
             CAR ;
             CDR ;
             DIP { DUP } ;
             ITER { SWAP ;
                    PAIR ;
                    DUP ;
                    CDR ;
                    CAR ;
                    DIP { DUP ; CAR } ;
                    CONS ;
                    DIP { DROP } } ;
             DUP ;
             NIL address ;
             SWAP ;
             ITER { SWAP ; PAIR ; DUP ; CDR ; DIP { DUP ; CAR } ; CONS ; DIP { DROP } } ;
             DUP ;
             DIP { DROP 4 } } ;
         DIP 2 { DUP } ;
         DIG 2 ;
         CDR ;
         DIP 3 { DUP } ;
         DIG 3 ;
         CAR ;
         IF_LEFT
           { DUP ;
             DIP { DIP { DUP } ; SWAP } ;
             PAIR ;
             DUP ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DUP ;
             DIP { DUP } ;
             SWAP ;
             DIP { DIP 6 { DUP } ; DIG 6 } ;
             EXEC ;
             SENDER ;
             SWAP ;
             PAIR ;
             DIP { DIP 7 { DUP } ; DIG 7 } ;
             EXEC ;
             IF { SENDER ;
                  DUP ;
                  DIP { DIP 2 { DUP } ; DIG 2 ; CAR ; CDR } ;
                  GET ;
                  IF_NONE { PUSH string "MAP FIND" ; FAILWITH } {} ;
                  DIP 3 { DUP } ;
                  DIG 3 ;
                  DIP 2 { DUP } ;
                  DIG 2 ;
                  DIP { DIP { DUP } ;
                        SWAP ;
                        DIP 2 { DUP } ;
                        DIG 2 ;
                        DIP { DIP 6 { DUP } ; DIG 6 ; CAR } ;
                        ADD ;
                        SOME ;
                        DIP { DROP ; DIP 4 { DUP } ; DIG 4 ; CAR ; CDR } } ;
                  UPDATE ;
                  DIP { DUP ; CDR ; SWAP ; CAR ; CAR } ;
                  SWAP ;
                  PAIR ;
                  PAIR ;
                  DIP 3 { DUP } ;
                  DIG 3 ;
                  DIP { DUP } ;
                  SWAP ;
                  DIP { DROP 4 } }
                { DIP { DUP } ;
                  SWAP ;
                  DIP { DIP 2 { DUP } ; DIG 2 ; CAR ; PUSH int 0 ; ADD ; SENDER ; PAIR } ;
                  PAIR ;
                  DUP ;
                  CAR ;
                  DIP { DUP } ;
                  SWAP ;
                  CDR ;
                  DUP ;
                  CAR ;
                  DIP 2 { DUP } ;
                  DIG 2 ;
                  CAR ;
                  CDR ;
                  DIP { DUP } ;
                  SWAP ;
                  DIP { DUP } ;
                  MEM ;
                  IF { PUSH string "key already exists" ; FAILWITH } { PUSH unit Unit } ;
                  DIP 4 { DUP } ;
                  DIG 4 ;
                  DIP 3 { DUP } ;
                  DIG 3 ;
                  DIP { DIP 4 { DUP } ;
                        DIG 4 ;
                        CDR ;
                        SOME ;
                        DIP { DIP 2 { DUP } ; DIG 2 } } ;
                  UPDATE ;
                  DIP { DUP ; CDR ; SWAP ; CAR ; CAR } ;
                  SWAP ;
                  PAIR ;
                  PAIR ;
                  DIP { DROP 6 ; DUP } ;
                  SWAP ;
                  DIP { DUP } ;
                  SWAP ;
                  DIP { DROP 2 } } ;
             DUP ;
             DIP { DIP 3 { DUP } ;
                   DIG 3 ;
                   CAR ;
                   SENDER ;
                   PAIR ;
                   DIP { DIP 3 { DUP } ; DIG 3 ; CDR ; NOW ; PAIR } ;
                   PAIR } ;
             PAIR ;
             DUP ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DUP ;
             CDR ;
             CDR ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CDR ;
             CDR ;
             DIP { DUP } ;
             SWAP ;
             DIP { DUP } ;
             MEM ;
             IF { PUSH string "key already exists" ; FAILWITH } { PUSH unit Unit } ;
             DIP 4 { DUP } ;
             DIG 4 ;
             DIP 3 { DUP } ;
             DIG 3 ;
             DIP { DIP 4 { DUP } ;
                   DIG 4 ;
                   CAR ;
                   CAR ;
                   DIP { DIP 4 { DUP } ; DIG 4 ; CAR ; CDR } ;
                   PAIR ;
                   DIP { DIP 4 { DUP } ; DIG 4 ; CDR ; CAR } ;
                   PAIR ;
                   SOME ;
                   DIP { DIP 2 { DUP } ; DIG 2 } } ;
             UPDATE ;
             DIP { DUP ; CAR ; SWAP ; CDR ; CAR } ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             DIP { DROP 6 } ;
             DUP ;
             NIL operation ;
             PAIR ;
             DIP { DROP 7 } }
           { DUP ;
             DIP { DIP { DUP } ; SWAP } ;
             PAIR ;
             DUP ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DUP ;
             NIL operation ;
             SWAP ;
             CDR ;
             CAR ;
             SENDER ;
             COMPARE ;
             EQ ;
             NOT ;
             IF { PUSH string "invalid caller" ; FAILWITH } { PUSH unit Unit } ;
             DIP 2 { DUP } ;
             DIG 2 ;
             DIP { DIP 7 { DUP } ; DIG 7 } ;
             EXEC ;
             DIP { DIP 3 { DUP } ; DIG 3 ; CDR } ;
             PAIR ;
             DIP { DIP 8 { DUP } ; DIG 8 } ;
             EXEC ;
             NOT ;
             IF { PUSH string "require r2 failed" ; FAILWITH } { PUSH unit Unit } ;
             DIP 4 { DUP } ;
             DIG 4 ;
             CDR ;
             CONTRACT
               (or (or (or (or (unit %accept_admin) (unit %adminitrable))
                           (or (pair %new_prepayment (pair (address %addr) (string %txid)) (int %value))
                               (unit %noadmin)))
                       (or (or (pair %pay (int %expected_total) (int %value))
                               (pair %set_discount (int %0) (int %1)))
                           (or (int %set_max_amount) (int %set_max_total_amount))))
                   (or (int %set_payment_duration) (address %transfer_admin))) ;
             IF_NONE { PUSH string "bad address for get_contract" ; FAILWITH } {} ;
             DIP 5 { DUP } ;
             DIG 5 ;
             CAR ;
             CDR ;
             DIP { DIP 5 { DUP } ; DIG 5 ; CAR ; CAR } ;
             PAIR ;
             LEFT (pair (int %0) (int %1)) ;
             LEFT (or int int) ;
             RIGHT
               (or (or unit unit) (or (pair (pair (address %addr) (string %txid)) (int %value)) unit)) ;
             LEFT (or int address) ;
             DUP ;
             DIP { DIP { DUP } ; SWAP ; PUSH mutez 0 } ;
             TRANSFER_TOKENS ;
             DIP 6 { DUP } ;
             DIG 6 ;
             DIP { DIP 7 { DUP } ;
                   DIG 7 ;
                   CAR ;
                   CAR ;
                   NOW ;
                   SWAP ;
                   PAIR ;
                   DIP { NIL int ;
                         DIP 7 { DUP } ;
                         DIG 7 ;
                         CAR ;
                         CAR ;
                         DIP { DUP } ;
                         ITER { SWAP ;
                                PAIR ;
                                DUP ;
                                CDR ;
                                CAR ;
                                DIP { DUP ; CAR } ;
                                CONS ;
                                DIP { DROP } } ;
                         DUP ;
                         NIL int ;
                         SWAP ;
                         ITER { SWAP ; PAIR ; DUP ; CDR ; DIP { DUP ; CAR } ; CONS ; DIP { DROP } } ;
                         DUP ;
                         DIP { DROP 3 } ;
                         DUP ;
                         SIZE ;
                         INT ;
                         DIP { DROP ; PUSH int 1 } ;
                         ADD } ;
                   PAIR } ;
             PAIR ;
             DUP ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DUP ;
             CDR ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CAR ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             DIP { DUP } ;
             MEM ;
             IF { PUSH string "key already exists" ; FAILWITH } { PUSH unit Unit } ;
             DIP 4 { DUP } ;
             DIG 4 ;
             DIP 3 { DUP } ;
             DIG 3 ;
             DIP { DIP 4 { DUP } ;
                   DIG 4 ;
                   CAR ;
                   CAR ;
                   DIP { DIP 4 { DUP } ; DIG 4 ; CAR ; CDR } ;
                   PAIR ;
                   SOME ;
                   DIP { DIP 2 { DUP } ; DIG 2 } } ;
             UPDATE ;
             DIP { DUP ; CDR ; SWAP ; CAR ; CDR } ;
             PAIR ;
             PAIR ;
             DIP { DROP 6 } ;
             DIP 8 { DUP } ;
             DIG 8 ;
             CDR ;
             DUP ;
             DIP { DIP { DUP } ; SWAP ; CAR ; CDR } ;
             GET ;
             IF_NONE { PUSH string "MAP FIND" ; FAILWITH } {} ;
             DIP 2 { DUP } ;
             DIG 2 ;
             DIP 2 { DUP } ;
             DIG 2 ;
             DIP { DIP { DUP } ;
                   SWAP ;
                   DIP 12 { DUP } ;
                   DIG 12 ;
                   CAR ;
                   CDR ;
                   DIP { DIP 12 { DUP } ; DIG 12 ; CAR ; CAR } ;
                   SUB ;
                   SOME ;
                   DIP { DROP ; DIP 3 { DUP } ; DIG 3 ; CAR ; CDR } } ;
             UPDATE ;
             DIP { DUP ; CDR ; SWAP ; CAR ; CAR } ;
             SWAP ;
             PAIR ;
             PAIR ;
             DIP 4 { DUP } ;
             DIG 4 ;
             DIP { DIP 9 { DUP } ; DIG 9 } ;
             CONS ;
             DIP { DUP } ;
             PAIR ;
             DIP { DROP 14 } } ;
         DIP { DROP 4 } } }
