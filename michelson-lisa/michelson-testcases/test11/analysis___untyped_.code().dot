digraph {
	"node0" [shape="rect",color="black",label=<v0 = PAIR(PARAMETER_VALUE, STORAGE_VALUE)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ v0: #TOP#<BR/>[stack: #TOP#] ]]<BR/>}} -&gt; [v0]>];
	"node1" [shape="rect",color="gray",label=<DROP()<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ v0: #TOP#<BR/>v1: #TOP#<BR/>v2: #TOP#<BR/>v3: #TOP#<BR/>v4: #TOP#<BR/>[stack: #TOP#] ]]<BR/>}} -&gt; [v4]>];
	"node2" [shape="rect",color="gray",label=<v4 = ExtractValueFromOption(v3)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ v0: #TOP#<BR/>v1: #TOP#<BR/>v2: #TOP#<BR/>v3: #TOP#<BR/>v4: #TOP#<BR/>[stack: #TOP#] ]]<BR/>}} -&gt; [v4]>];
	"node3" [shape="rect",color="gray",label=<v1 = CAR(v0)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ v0: #TOP#<BR/>v1: #TOP#<BR/>[stack: #TOP#] ]]<BR/>}} -&gt; [v1]>];
	"node4" [shape="rect",color="gray",label=<v3 = CONTRACT(&quot;PAIR ADDRESS_TYPE PAIR ADDRESS_TYPE NAT_TYPE&quot;, v2)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ v0: #TOP#<BR/>v1: #TOP#<BR/>v2: #TOP#<BR/>v3: #TOP#<BR/>[stack: #TOP#] ]]<BR/>}} -&gt; [v3]>];
	"node5" [shape="rect",color="gray",label=<v5 = UNIT()<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ v0: #TOP#<BR/>v1: #TOP#<BR/>v2: #TOP#<BR/>v3: #TOP#<BR/>v4: #TOP#<BR/>v5: #TOP#<BR/>[stack: #TOP#] ]]<BR/>}} -&gt; [v5]>];
	"node6" [shape="rect",color="gray",label=<v7 = PAIR(v1, v6)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ v0: #TOP#<BR/>v1: #TOP#<BR/>v2: #TOP#<BR/>v3: #TOP#<BR/>v4: #TOP#<BR/>v6: #TOP#<BR/>v7: #TOP#<BR/>[stack: #TOP#] ]]<BR/>}} -&gt; [v7]>];
	"node7" [shape="rect",color="gray",label=<v6 = NIL(&quot;OPERATION_TYPE&quot;)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ v0: #TOP#<BR/>v1: #TOP#<BR/>v2: #TOP#<BR/>v3: #TOP#<BR/>v4: #TOP#<BR/>v6: #TOP#<BR/>[stack: #TOP#] ]]<BR/>}} -&gt; [v6]>];
	"node8" [shape="rect",color="black",peripheries="2",label=<ret<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ v0: #TOP#<BR/>v1: #TOP#<BR/>v2: #TOP#<BR/>v3: #TOP#<BR/>v4: #TOP#<BR/>v6: #TOP#<BR/>v7: #TOP#<BR/>[stack: _|_] ]]<BR/>}} -&gt; [skip]>];
	"node9" [shape="rect",color="gray",label=<v2 = PUSH(&quot;ADDRESS_TYPE&quot;, &quot;&quot;KT18apu7iDnqnUeXdMv3ZVjs81DTPWK6f1Me%transfer&quot;&quot;)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ v0: #TOP#<BR/>v1: #TOP#<BR/>v2: #TOP#<BR/>[stack: #TOP#] ]]<BR/>}} -&gt; [v2]>];
	"node10" [shape="rect",color="black",peripheries="2",label=<FAILWITH()<BR/>{{<BR/>heap [[ _|_ ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; []>];
	"node1" -> "node7" [color="black"];
	"node2" -> "node1" [color="red",style="dashed"];
	"node2" -> "node5" [color="blue",style="dashed"];
	"node3" -> "node9" [color="black"];
	"node4" -> "node2" [color="black"];
	"node5" -> "node10" [color="black"];
	"node6" -> "node8" [color="black"];
	"node7" -> "node6" [color="black"];
	"node9" -> "node4" [color="black"];
	"node0" -> "node3" [color="black"];
subgraph cluster_legend {
	label="Legend";
	style=dotted;
	node [shape=plaintext];
	"legend" [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0"><tr><td align="right">node border&nbsp;</td><td align="left"><font color="gray">gray</font>, single</td></tr><tr><td align="right">entrypoint border&nbsp;</td><td align="left"><font color="black">black</font>, single</td></tr><tr><td align="right">exitpoint border&nbsp;</td><td align="left"><font color="black">black</font>, double</td></tr><tr><td align="right">sequential edge&nbsp;</td><td align="left"><font color="black">black</font>, solid</td></tr><tr><td align="right">true edge&nbsp;</td><td align="left"><font color="blue">blue</font>, dashed</td></tr><tr><td align="right">false edge&nbsp;</td><td align="left"><font color="red">red</font>, dashed</td></tr></table>>];
}

}
