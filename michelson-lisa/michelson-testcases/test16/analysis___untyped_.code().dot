digraph {
	"node0" [shape="rect",color="black",label=<v0 = PAIR(PARAMETER_VALUE, STORAGE_VALUE)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ #TOP# ]]<BR/>}} -&gt; [v0]>];
	"node1" [shape="rect",color="gray",label=<SWAP()<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ #TOP# ]]<BR/>}} -&gt; [v4]>];
	"node2" [shape="rect",color="gray",label=<v8 = COMPARE(v6, v7)<BR/>{{<BR/>heap [[ _|_ ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; []>];
	"node3" [shape="rect",color="gray",label=<v25 = TRANSFER_TOKENS(v22, v23, v24)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; [v25]>];
	"node4" [shape="rect",color="gray",label=<v14 = CAR(v12)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ #TOP# ]]<BR/>}} -&gt; [v14]>];
	"node5" [shape="rect",color="gray",label=<DROP()<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; [v9]>];
	"node6" [shape="rect",color="gray",label=<v11 = NIL(&quot;OPERATION_TYPE&quot;)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; [v11]>];
	"node7" [shape="rect",color="gray",label=<v15 = COMPARE(v4, v14)<BR/>{{<BR/>heap [[ _|_ ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; []>];
	"node8" [shape="rect",color="gray",label=<SWAP()<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; [v26]>];
	"node9" [shape="rect",color="gray",label=<v16 = EQ(v15)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; [v16]>];
	"node10" [shape="rect",color="gray",label=<v20 = CONTRACT(&quot;UNIT_TYPE&quot;, v19)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; [v20]>];
	"node11" [shape="rect",color="gray",label=<v21 = ExtractValueFromOption(v20)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; [v21]>];
	"node12" [shape="rect",color="gray",label=<v17 = PUSH(&quot;STRING_TYPE&quot;, &quot;&quot;WrongCondition: self.data.owner == sp.sender&quot;&quot;)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; [v17]>];
	"node13" [shape="rect",color="gray",label=<v1 = DUP(v0)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ #TOP# ]]<BR/>}} -&gt; [v1]>];
	"node14" [shape="rect",color="gray",label=<v18 = DUP(v13)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; [v18]>];
	"node15" [shape="rect",color="gray",label=<DUG(2, v5)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ #TOP# ]]<BR/>}} -&gt; [v5]>];
	"node16" [shape="rect",color="gray",label=<v26 = CONS(v18, v25)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; [v26]>];
	"node17" [shape="rect",color="gray",label=<v9 = EQ(v8)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; [v9]>];
	"node18" [shape="rect",color="gray",label=<DROP()<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; [v26]>];
	"node19" [shape="rect",color="gray",label=<v2 = CDR(v1)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ #TOP# ]]<BR/>}} -&gt; [v2]>];
	"node20" [shape="rect",color="gray",label=<v19 = NIL(&quot;OPERATION_TYPE&quot;)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; [v19]>];
	"node21" [shape="rect",color="gray",label=<v7 = AMOUNT()<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ #TOP# ]]<BR/>}} -&gt; [v7]>];
	"node22" [shape="rect",color="gray",label=<v4 = ConsumeLEFT_RIGHT_ProduceOr(v3)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ #TOP# ]]<BR/>}} -&gt; [v4]>];
	"node23" [shape="rect",color="gray",label=<SWAP()<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; [v19]>];
	"node24" [shape="rect",color="gray",label=<v28 = PAIR(v0, v27)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; [v28]>];
	"node25" [shape="rect",color="black",peripheries="2",label=<ret<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; [skip]>];
	"node26" [shape="rect",color="black",peripheries="2",label=<FAILWITH()<BR/>{{<BR/>heap [[ _|_ ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; []>];
	"node27" [shape="rect",color="gray",label=<DIG(2)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ #TOP# ]]<BR/>}} -&gt; [2]>];
	"node28" [shape="rect",color="gray",label=<DUG(3, v13)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ #TOP# ]]<BR/>}} -&gt; [v13]>];
	"node29" [shape="rect",color="gray",label=<SWAP()<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ #TOP# ]]<BR/>}} -&gt; [v2]>];
	"node30" [shape="rect",color="gray",label=<v12 = SENDER()<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ #TOP# ]]<BR/>}} -&gt; [v12]>];
	"node31" [shape="rect",color="gray",label=<v27 = Phi(v11, v13)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; [v27]>];
	"node32" [shape="rect",color="black",peripheries="2",label=<FAILWITH()<BR/>{{<BR/>heap [[ _|_ ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; []>];
	"node33" [shape="rect",color="gray",label=<v22 = PUSH(&quot;UNIT_TYPE&quot;, &quot;Unit&quot;)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; [v22]>];
	"node34" [shape="rect",color="gray",label=<v10 = PUSH(&quot;STRING_TYPE&quot;, &quot;&quot;WrongCondition: sp.amount == self.data.price&quot;&quot;)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; [v10]>];
	"node35" [shape="rect",color="gray",label=<v6 = CDR(v4)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ #TOP# ]]<BR/>}} -&gt; [v6]>];
	"node36" [shape="rect",color="black",peripheries="2",label=<FAILWITH()<BR/>{{<BR/>heap [[ _|_ ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; []>];
	"node37" [shape="rect",color="gray",label=<v13 = DUP(v12)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ #TOP# ]]<BR/>}} -&gt; [v13]>];
	"node38" [shape="rect",color="gray",label=<v3 = CAR(v2)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ #TOP# ]]<BR/>}} -&gt; [v3]>];
	"node39" [shape="rect",color="gray",label=<v24 = PUSH(&quot;UNIT_TYPE&quot;, &quot;Unit&quot;)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; [v24]>];
	"node40" [shape="rect",color="gray",label=<v5 = DUP(v4)<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ #TOP# ]]<BR/>}} -&gt; [v5]>];
	"node41" [shape="rect",color="gray",label=<v23 = BALANCE()<BR/>{{<BR/>heap [[ monolith ]]<BR/>value [[ _|_ ]]<BR/>}} -&gt; [v23]>];
	"node1" -> "node40" [color="black"];
	"node2" -> "node17" [color="black"];
	"node3" -> "node16" [color="black"];
	"node4" -> "node7" [color="black"];
	"node5" -> "node6" [color="black"];
	"node6" -> "node31" [color="black"];
	"node7" -> "node9" [color="black"];
	"node8" -> "node18" [color="black"];
	"node9" -> "node14" [color="blue",style="dashed"];
	"node9" -> "node12" [color="red",style="dashed"];
	"node10" -> "node11" [color="black"];
	"node11" -> "node33" [color="blue",style="dashed"];
	"node11" -> "node41" [color="red",style="dashed"];
	"node12" -> "node26" [color="black"];
	"node13" -> "node19" [color="black"];
	"node14" -> "node20" [color="black"];
	"node15" -> "node35" [color="black"];
	"node16" -> "node8" [color="black"];
	"node17" -> "node34" [color="red",style="dashed"];
	"node17" -> "node5" [color="blue",style="dashed"];
	"node18" -> "node31" [color="black"];
	"node19" -> "node29" [color="black"];
	"node20" -> "node23" [color="black"];
	"node21" -> "node2" [color="black"];
	"node22" -> "node1" [color="blue",style="dashed"];
	"node22" -> "node30" [color="red",style="dashed"];
	"node23" -> "node10" [color="black"];
	"node24" -> "node25" [color="black"];
	"node0" -> "node13" [color="black"];
	"node27" -> "node37" [color="black"];
	"node28" -> "node4" [color="black"];
	"node29" -> "node38" [color="black"];
	"node30" -> "node27" [color="black"];
	"node31" -> "node24" [color="black"];
	"node33" -> "node36" [color="black"];
	"node34" -> "node32" [color="black"];
	"node35" -> "node21" [color="black"];
	"node37" -> "node28" [color="black"];
	"node38" -> "node22" [color="black"];
	"node39" -> "node3" [color="black"];
	"node40" -> "node15" [color="black"];
	"node41" -> "node39" [color="black"];
subgraph cluster_legend {
	label="Legend";
	style=dotted;
	node [shape=plaintext];
	"legend" [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0"><tr><td align="right">node border&nbsp;</td><td align="left"><font color="gray">gray</font>, single</td></tr><tr><td align="right">entrypoint border&nbsp;</td><td align="left"><font color="black">black</font>, single</td></tr><tr><td align="right">exitpoint border&nbsp;</td><td align="left"><font color="black">black</font>, double</td></tr><tr><td align="right">sequential edge&nbsp;</td><td align="left"><font color="black">black</font>, solid</td></tr><tr><td align="right">true edge&nbsp;</td><td align="left"><font color="blue">blue</font>, dashed</td></tr><tr><td align="right">false edge&nbsp;</td><td align="left"><font color="red">red</font>, dashed</td></tr></table>>];
}

}
